import os
import json
import logging
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram_dialog import Window, Dialog, DialogRegistry, DialogManager, StartMode
from aiogram_dialog.widgets.kbd import Url, Button, Back, SwitchTo, Cancel, Row
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import MessageInput
from aiogram import types
import os


with open(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'parameters.json'), 'r', encoding='utf-8') as infile:
    parameters = json.load(infile)
    QUESTIONS = parameters['QUESTIONS']
    ANSWERS = parameters['ANSWERS']
    GEOS = parameters['GEOS']
    FORMULAS = parameters['FORMULAS']
    ADMINS = parameters['ADMINS']


logging.basicConfig(level=logging.INFO)
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dispatcher = Dispatcher(bot, storage=storage)
registry = DialogRegistry(dispatcher)


class AppSG(StatesGroup):
    menu = State()
    maintenance_0 = State()
    # maintenance_1 = State()
    # maintenance_2 = State()
    installation_0 = State()
    installation_1 = State()
    installation_2 = State()
    installation_3 = State()
    installation_4 = State()
    installation_5 = State()
    installation_6 = State()
    installation_7 = State()
    registration_1 = State()


@dispatcher.message_handler(commands=["start"])
async def start(message: Message, dialog_manager: DialogManager):
    with open('images/description.jpeg', 'rb') as img:
        await message.answer_photo(img, caption='–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –±—É—Ä–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è ¬´–°–ê–¢–£–†–ò–¢¬ª. –ë—É—Ä–∏–º –±–æ–ª–µ–µ 18 –ª–µ—Ç. –ë–æ–ª–µ–µ 2000 —Å–∫–≤–∞–∂–∏–Ω –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n–ü—Ä–æ–±—É—Ä–∏–º –¥–ª—è –≤–∞—Å –±—ã—Å—Ç—Ä–æ, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π. –ó–≤–æ–Ω–∏—Ç–µ +79037258536, –Ω–∞–≤–µ—Ä–Ω—è–∫–∞ –º—ã —É–∂–µ –±—É—Ä–∏–ª–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏!\n\n–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∫–≤–∞–∂–∏–Ω—ã –Ω–∞ –í–∞—à–µ–º —É—á–∞—Å—Ç–∫–µ –Ω–∞–∂–º–∏—Ç–µ /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–¥—É –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.')

@dispatcher.message_handler(commands=["menu"])
async def menu(message: Message, dialog_manager: DialogManager):
    await dialog_manager.start(AppSG.menu, mode=StartMode.RESET_STACK)
    dialog_manager.current_context().dialog_data['chat_id'] = message.chat.id

async def report_admin(message_title: str, questions: list, dialog_manager: DialogManager, **kwargs):
    answers = dialog_manager.current_context().dialog_data
    message_text = message_title + '\n\n'
    for question in questions:
        if question in answers:
            answer = str(answers[question])
        else:
            answer = '-'
        if question in QUESTIONS:
            message_text += QUESTIONS[question]
        else:
            message_text += question
        message_text += '\n'
        if answer in ANSWERS:
            message_text += ANSWERS[answer]
        else:
            message_text += answer
        message_text += '\n'
    for admin in ADMINS:
        try:
            await bot.send_message(chat_id=admin, text=message_text)
        except:
            pass


async def start_survey(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    if 'menu_0_1' == callback.data:
        await dialog_manager.dialog().switch_to(AppSG.installation_0)
    elif 'menu_0_2' == callback.data:
        await dialog_manager.dialog().switch_to(AppSG.maintenance_0)

async def installation_0(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_0'] = callback.data
    await dialog_manager.dialog().switch_to(AppSG.installation_1)

async def installation_1(message: Message, dialog: Dialog, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_1'] = message.text
    await dialog_manager.dialog().switch_to(AppSG.installation_2)

async def installation_2(message: Message, dialog: Dialog, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_2'] = (message.location['latitude'], message.location['longitude'],)
    await dialog_manager.dialog().switch_to(AppSG.installation_3)

async def installation_3(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_3'] = callback.data
    await dialog_manager.dialog().switch_to(AppSG.installation_4)

async def installation_4(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_4'] = callback.data
    await dialog_manager.dialog().switch_to(AppSG.installation_5)

async def installation_5(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_5'] = callback.data
    if callback.data == 'installation_5_1':
        await dialog_manager.dialog().switch_to(AppSG.installation_6)
    else:
        await dialog_manager.dialog().switch_to(AppSG.installation_7)

async def installation_6(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['installation_6'] = callback.data
    await dialog_manager.dialog().switch_to(AppSG.installation_7)

def get_best_geo_depth(user_geo):
    best_dist, depth = None, None
    for current_geo in GEOS:
        current_dist = ( ( current_geo[0] - user_geo[0] )**2 + ( current_geo[1] - user_geo[1] )**2 )**0.5
        if not best_dist or best_dist > current_dist:
            best_dist = current_dist
            depth = current_geo[-1]
    return depth

def get_installation_cost(answers, depth):
    formula = ' '.join([FORMULAS[answer] for question, answer in answers.items() if answer in FORMULAS])
    cost = eval(formula)
    return cost

async def get_installation_7(dialog_manager: DialogManager, **kwargs):
    answers = dialog_manager.current_context().dialog_data
    name = answers['installation_1']
    user_geo = answers['installation_2']
    depth = get_best_geo_depth(user_geo)
    cost = get_installation_cost(answers, depth)
    dialog_manager.current_context().dialog_data['cost'] = cost
    await report_admin('üü° –ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å', 
        ['chat_id', 'cost', 'installation_1', 'installation_2', 'installation_3', 'installation_4', 'installation_5', 'installation_6'], 
        dialog_manager)
    return {'name': name, 'cost': cost}


async def start_registration(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    await dialog_manager_done(dialog_manager, is_message=False)
    await dialog_manager.start(AppSG.registration_1, mode=StartMode.RESET_STACK)
    dialog_manager.current_context().dialog_data['chat_id'] = callback.message.chat.id

async def registration_1(message: Message, dialog: Dialog, dialog_manager: DialogManager):
    dialog_manager.current_context().dialog_data['registration_1'] = message.text
    await report_admin('üü¢ –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–º–µ—Ä', 
        ['chat_id', 'registration_1'], 
        dialog_manager)
    await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
    await dialog_manager_done(dialog_manager)


async def close_dialog(callback: CallbackQuery, button: Button, dialog_manager: DialogManager, is_message=True):
    await dialog_manager_done(dialog_manager, is_message)

async def dialog_manager_done(dialog_manager: DialogManager, is_message=True):
    if is_message:
        await bot.send_message(
            chat_id=dialog_manager.current_context().dialog_data['chat_id'], 
            text='–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Telegram-–±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /menu –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–¥—É –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é.')
    await dialog_manager.done()
    


app_dialog = Dialog(
    Window(
        Const("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–∞–º."),
        Button(Const("‚õè –ë—É—Ä–µ–Ω–∏–µ —Å–∫–≤–∞–∂–∏–Ω—ã"), id="menu_0_1", on_click=start_survey),
        # Button(Const("üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"), id="menu_0_2", on_click=start_survey),
        Url(Const("üì± +7 (903) 725-85-36"), Const('https://t.me/+79037258536')),
        Button(Const("üì≤ –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"), id="menu_0_3", on_click=start_registration),
        Cancel(Const("üîö –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é")),
        state=AppSG.menu,
    ),
    Window(
        Const("–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –æ–±–æ—Ä—É–∂–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ –≤ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."),
        Url(Const("üì± +7 (903) 725-85-36"), Const('https://t.me/+79037258536')),
        Button(Const("üì≤ –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"), id="maintenance_0_1", on_click=start_registration),
        # Button(Const("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"), id="maintenance_0_1", on_click=maintenance_0),
        SwitchTo(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="maintenance_0_2", state=AppSG.menu),
        state=AppSG.maintenance_0,
    ),
    Window(
        Const("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å."),
        Button(Const("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å"), id="installation_0_1", on_click=installation_0),
        SwitchTo(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"), id="installation_0_2", state=AppSG.menu),
        state=AppSG.installation_0,
    ),
    Window(
        Const(QUESTIONS['installation_1']),
        MessageInput(installation_1),
        state=AppSG.installation_1,
    ),
    Window(
        Const(QUESTIONS['installation_2'] + '\n\n' + QUESTIONS['installation_2_instruction']),
        MessageInput(installation_2, content_types=types.ContentTypes.LOCATION),
        Back(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")),
        state=AppSG.installation_2,
    ),
    Window(
        Const(QUESTIONS['installation_3']),
        Button(Const("1Ô∏è‚É£ " + ANSWERS['installation_3_1']), id="installation_3_1", on_click=installation_3),
        Button(Const("2Ô∏è‚É£ " + ANSWERS['installation_3_2']), id="installation_3_2", on_click=installation_3),
        Button(Const("3Ô∏è‚É£ " + ANSWERS['installation_3_3']), id="installation_3_3", on_click=installation_3),
        Button(Const("4Ô∏è‚É£ " + ANSWERS['installation_3_4']), id="installation_3_4", on_click=installation_3),
        Back(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")),
        state=AppSG.installation_3,
    ),
    Window(
        Const(QUESTIONS['installation_4']),
        Button(Const("1Ô∏è‚É£ " + ANSWERS['installation_4_1']), id="installation_4_1", on_click=installation_4),
        Button(Const("2Ô∏è‚É£ " + ANSWERS['installation_4_2']), id="installation_4_2", on_click=installation_4),
        Back(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")),
        state=AppSG.installation_4,
    ),
    Window(
        Const(QUESTIONS['installation_5']),
        Button(Const("1Ô∏è‚É£ " + ANSWERS['installation_5_1']), id="installation_5_1", on_click=installation_5),
        Button(Const("2Ô∏è‚É£ " + ANSWERS['installation_5_2']), id="installation_5_2", on_click=installation_5),
        Back(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")),
        state=AppSG.installation_5,
    ),
    Window(
        Const(QUESTIONS['installation_6']),
        Button(Const("1Ô∏è‚É£ " + ANSWERS['installation_6_1']), id="installation_6_1", on_click=installation_6),
        Button(Const("2Ô∏è‚É£ " + ANSWERS['installation_6_2']), id="installation_6_2", on_click=installation_6),
        Back(Const("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")),
        state=AppSG.installation_6,
    ),
    Window(
        Format("{name}, –±–µ–∑ —É—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤–∞—à–∞ —Å–∫–≤–∞–∂–∏–Ω–∞ –ø–æ–¥ –∫–ª—é—á –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {cost} —Ä—É–±–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ Telegram –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞."),
        Url(Const("üì± +7 (903) 725-85-36"), Const('https://t.me/+79037258536')),
        Button(Const("üì≤ –ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ"), id="installation_7_1", on_click=start_registration),
        Button(Const("üîö –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"), id="installation_7_2", on_click=close_dialog),
        state=AppSG.installation_7,
        getter=get_installation_7,
    ),
    Window(
        Const(QUESTIONS['registration_1']),
        Button(Const("üîö –ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥"), id="installation_7_2", on_click=close_dialog),
        MessageInput(registration_1),
        state=AppSG.registration_1,
    ),
)
registry.register(app_dialog)


if __name__ == '__main__':
    executor.start_polling(dispatcher, skip_updates=True)
